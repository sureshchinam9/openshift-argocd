apiVersion: v1
kind: Template
metadata:
  labels:
    app: pavement-yms
    app.kubernetes.io/instance: pavement
  name: pavement-application-template
  namespace: pavement
objects:
  - apiVersion: v1
    data:
      .dockerconfigjson: >-
        eyJhdXRocyI6eyJkb2NrZXIuY2FsY2FydGFnZS5jb20vIjp7InVzZXJuYW1lIjoiYmNyaXN0IiwicGFzc3dvcmQiOiJTbCR0NEF0RjJAIiwiZW1haWwiOiJicmlhbi5jcmlzdEBjYWxjYXJ0YWdlLmNvbSIsImF1dGgiOiJZbU55YVhOME9sTnNKSFEwUVhSR01rQT0ifX19
    kind: Secret
    metadata:
      annotations:
        kubernetes.io/service-account.name: default
      name: ccc-docker-default
    type: kubernetes.io/dockerconfigjson
  - apiVersion: v1
    data:
      odbc.ini: '${ODBC_FILE_CLEAR}'
    kind: Secret
    metadata:
      name: odbcfile
  - apiVersion: v1
    data:
      oauth-private.key: '${PASSPORT_OAUTH_PRIVATE_KEY_CLEAR}'
      oauth-public.key: '${PASSPORT_OAUTH_PUBLIC_KEY_CLEAR}'
    kind: Secret
    metadata:
      name: passport-oauth
  - apiVersion: v1
    data:
      APP_DEBUG: '${APP_DEBUG}'
      APP_ENV: '${APP_ENV}'
      APP_KEY: '${APP_KEY}'
      APP_NAME: '${APP_NAME}'
      APP_URL: '${APP_URL}'
      BROADCAST_DRIVER: '${BROADCAST_DRIVER}'
      CACHE_DRIVER: '${CACHE_DRIVER}'
      DB2_ODBC: '${ODBC_CONNECTION_NAME}'
      DB_DATABASE: '${DB_DATABASE}'
      DB_HOST: '${DB_HOST}'
      DB_PASSWORD: '${DB_PASSWORD}'
      DB_USERNAME: '${DB_USERNAME}'
      DECON_API_URL: '${DECON_API_URL}'
      DECON_AUTH_TOKEN: '${DECON_AUTH_TOKEN}'
      EVENT_PROJECTOR_QUEUE_NAME: '${EVENT_PROJECTOR_QUEUE_NAME}'
      FTP_HOST: '${FTP_HOST}'
      FTP_PASSWORD: '${FTP_PASSWORD}'
      FTP_ROOT_DIR: '${FTP_ROOT_DIR}'
      FTP_USERNAME: '${FTP_USERNAME}'
      MAILGUN_DOMAIN: '${MAILGUN_DOMAIN}'
      MAILGUN_SECRET: '${MAILGUN_SECRET}'
      MAIL_DRIVER: '${MAIL_DRIVER}'
      MAIL_FROM_ADDRESS: '${MAIL_FROM_ADDRESS}'
      MAIL_FROM_NAME: '${MAIL_FROM_NAME}'
      MIGRATE_ON_DEPLOY: '${MIGRATE_ON_DEPLOY}'
      MIX_PUSHER_APP_CLUSTER: '${MIX_PUSHER_APP_CLUSTER}'
      MIX_PUSHER_APP_KEY: '${MIX_PUSHER_APP_KEY}'
      MIX_PUSHER_SHOW_SOURCE_MAPS: '${MIX_PUSHER_SHOW_SOURCE_MAPS}'
      MIX_SENTRY_LARAVEL_DSN: '${MIX_SENTRY_LARAVEL_DSN}'
      PSYSH_CONFIG: '${PSYSH_CONFIG}'
      PUSHER_APP_CLUSTER: '${PUSHER_APP_CLUSTER}'
      PUSHER_APP_ID: '${PUSHER_APP_ID}'
      PUSHER_APP_KEY: '${PUSHER_APP_KEY}'
      PUSHER_APP_SECRET: '${PUSHER_APP_SECRET}'
      QUEUE_CONNECTION: '${QUEUE_CONNECTION}'
      REDIS_HOST: '${REDIS_HOST}'
      SEED_ON_DEPLOY: '${SEED_ON_DEPLOY}'
      SENTRY_LARAVEL_DSN: '${SENTRY_LARAVEL_DSN}'
      SESSION_DRIVER: '${SESSION_DRIVER}'
    kind: Secret
    metadata:
      name: pavement-web-template
    type: Opaque
  - apiVersion: v1
    data:
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
      MYSQL_RANDOM_ROOT_PASSWORD: eWVz
      MYSQL_USER: '${DB_USERNAME}'
    kind: Secret
    metadata:
      annotations:
        description: >-
          Values used by the MariaDB image to create the initial User/database
          for the container
      name: db.env
    type: Opaque
  - apiVersion: v1
    data:
      pavement-ssl.crt: '${PAVEMENT_SSL_CRT_CLEAR}'
      pavement-ssl.key: '${PAVEMENT_SSL_KEY_CLEAR}'
    kind: Secret
    metadata:
      name: nginx-certs
    type: Opaque
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      labels:
        app: pavement-redis
      name: pavement-redis
    spec:
      lookupPolicy:
        local: true
      tags:
        - from:
            kind: DockerImage
            name: 'docker.io/library/redis:6.0.6-alpine'
          importPolicy: {}
          name: 6.0.6-alpine
          referencePolicy:
            type: Source
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        service: pavement-redis
      name: pavement-redis
    spec:
      ports:
        - name: 6379-tcp
          port: 6379
          protocol: TCP
          targetPort: 6379
      selector:
        deploymentconfig: pavement-redis
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        service: pavement-redis
      name: pavement-redis
    spec:
      replicas: 1
      selector:
        app: pavement-redis
        deploymentconfig: pavement-redis
      template:
        metadata:
          labels:
            app: pavement-redis
            deploymentconfig: pavement-redis
        spec:
          containers:
            - livenessProbe:
                exec:
                  command:
                    - redis-cli
                    - ping
                initialDelaySeconds: 20
                periodSeconds: 10
                timeoutSeconds: 5
              name: pavement-redis
              ports:
                - containerPort: 6379
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - redis-cli
                    - ping
                initialDelaySeconds: 2
                periodSeconds: 10
                timeoutSeconds: 5
              volumeMounts:
                - mountPath: /data
                  name: pavement-redis-data
          imagePullSecrets:
            - name: ccc-docker-default
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - emptyDir: {}
              name: pavement-redis-data
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - pavement-redis
            from:
              kind: ImageStreamTag
              name: 'pavement-redis:6.0.6-alpine'
          type: ImageChange
        - type: ConfigChange
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      labels:
        app: pavement-db
      name: pavement-db
    spec:
      lookupPolicy:
        local: true
      tags:
        - from:
            kind: DockerImage
            name: 'docker.calcartage.com/pavement-db:${IMAGE_STREAM_TAG_CLEAR}'
          name: '${IMAGE_STREAM_TAG_CLEAR}'
          referencePolicy:
            type: Source
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: pavement-db
      name: pavement-db
    spec:
      ports:
        - name: 3306-tcp
          port: 3306
          protocol: TCP
          targetPort: 3306
      selector:
        deploymentconfig: pavement-db
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: pavement-db
      name: pavement-db
    spec:
      replicas: '${{DB_CONTAINER_COUNT_CLEAR}}'
      selector:
        app: pavement-db
        deploymentconfig: pavement-db
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: pavement-db
            deploymentconfig: pavement-db
        spec:
          containers:
            - env:
                - name: DB_USERNAME_CLEAR
                  value: '${DB_USERNAME_CLEAR}'
                - name: DB_PASSWORD_CLEAR
                  value: '${DB_PASSWORD_CLEAR}'
              envFrom:
                - secretRef:
                    name: db.env
              livenessProbe:
                exec:
                  command:
                    - /bin/sh
                    - '-i'
                    - '-c'
                    - >-
                      MYSQL_PWD="$DB_PASSWORD_CLEAR" mysqladmin ping -u
                      $DB_USERNAME_CLEAR
                initialDelaySeconds: 30
                periodSeconds: 20
                timeoutSeconds: 10
              name: pavement-db
              ports:
                - containerPort: 3306
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - '-i'
                    - '-c'
                    - >-
                      MYSQL_PWD="$DB_PASSWORD_CLEAR" mysql -h 127.0.0.1 -u
                      $DB_USERNAME_CLEAR -e 'SELECT 1'
                initialDelaySeconds: 10
                periodSeconds: 5
                timeoutSeconds: 2
              resources: {}
              volumeMounts:
                - mountPath: /var/lib/mysql
                  name: pavement-db-data
          imagePullSecrets:
            - name: ccc-docker-default
          restartPolicy: Always
          volumes:
            - emptyDir: {}
              name: pavement-db-data
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - pavement-db
            from:
              kind: ImageStreamTag
              name: 'pavement-db:${IMAGE_STREAM_TAG_CLEAR}'
          type: ImageChange
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: pavement-web
      name: pavement-web
    spec:
      ports:
        - name: 9000-tcp
          port: 9000
          protocol: TCP
          targetPort: 9000
      selector:
        deploymentconfig: pavement-web
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      labels:
        app: pavement-web
      name: pavement-web
    spec:
      lookupPolicy:
        local: false
      tags:
        - annotations: null
          from:
            kind: DockerImage
            name: 'docker.calcartage.com/pavement-web:${IMAGE_STREAM_TAG_CLEAR}'
          importPolicy: {}
          name: '${IMAGE_STREAM_TAG_CLEAR}'
          referencePolicy:
            type: Source
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      labels:
        app: pavement-cron
      name: pavement-cron
    spec:
      lookupPolicy:
        local: false
      tags:
        - annotations: null
          from:
            kind: DockerImage
            name: 'docker.calcartage.com/pavement-cron:${IMAGE_STREAM_TAG_CLEAR}'
          importPolicy: {}
          name: '${IMAGE_STREAM_TAG_CLEAR}'
          referencePolicy:
            type: Source
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: pavement-web
      name: pavement-web
    spec:
      replicas: 1
      selector:
        app: pavement-web
        deploymentconfig: pavement-web
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: pavement-web
            deploymentconfig: pavement-web
        spec:
          containers:
            - env:
                - name: PHP_POD_NAME
                  value: pavement-web-php
              envFrom:
                - secretRef:
                    name: pavement-web-template
              lifecycle:
                postStart:
                  exec:
                    command:
                      - /bin/sh
                      - '-c'
                      - >-
                        sleep 10; cp /conf/volume-oauth/oauth-private.key
                        /conf/volume-oauth/oauth-public.key
                        /var/www/html/storage/; cp /conf/volume-odbc/odbc.ini
                        /etc/odbc.ini; if [ "$MIGRATE_ON_DEPLOY" = "true" ];
                        then php artisan migrate --force; fi; if [ "$APP_ENV" !=
                        "production" -a "$SEED_ON_DEPLOY" = "true" ]; then php
                        artisan migrate:fresh --seed --force; fi;
                    containerName: pavement-web-php
              livenessProbe:
                initialDelaySeconds: 20
                periodSeconds: 10
                tcpSocket:
                  port: 9000
                timeoutSeconds: 5
              name: pavement-web-php
              ports:
                - containerPort: 9000
                  protocol: TCP
              resources: {}
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /var/www/html/storage/app/reports
                  name: volume-reports
                - mountPath: /var/www/html/storage/logs
                  name: volume-storage
                - mountPath: /conf/volume-odbc/
                  name: volume-odbc
                - mountPath: /conf/volume-oauth/
                  name: volume-oauth
            - command:
                - php
                - artisan
                - horizon
              env:
                - name: PHP_POD_NAME
                  value: pavement-horizon
              envFrom:
                - secretRef:
                    name: pavement-web-template
              image: 'docker.calcartage.com/pavement-web:${IMAGE_STREAM_TAG_CLEAR}'
              lifecycle:
                livenessProbe:
                  initialDelaySeconds: 20
                  periodSeconds: 10
                  tcpSocket:
                    port: 9000
                  timeoutSeconds: 5
                ports:
                  - containerPort: 9000
                    protocol: TCP
                postStart:
                  exec:
                    command:
                      - /bin/sh
                      - '-c'
                      - >-
                        sleep 10; cp /conf/volume-oauth/oauth-private.key
                        /conf/volume-oauth/oauth-public.key
                        /var/www/html/storage/; cp /conf/volume-odbc/odbc.ini
                        /etc/odbc.ini;
                    containerName: pavement-horizon
                terminationMessagePolicy: File
              name: pavement-horizon
              volumeMounts:
                - mountPath: /var/www/html/storage/app/reports
                  name: volume-reports
                - mountPath: /var/www/html/storage/logs
                  name: volume-storage
                - mountPath: /conf/volume-odbc/
                  name: volume-odbc
                - mountPath: /conf/volume-oauth/
                  name: volume-oauth
            - env:
                - name: PHP_POD_NAME
                  value: pavement-cron
              envFrom:
                - secretRef:
                    name: pavement-web-template
              image: 'docker.calcartage.com/pavement-cron:${IMAGE_STREAM_TAG_CLEAR}'
              imagePullPolicy: IfNotPresent
              lifecycle:
                postStart:
                  exec:
                    command:
                      - /bin/sh
                      - '-c'
                      - >-
                        sleep 10; cp /conf/volume-oauth/oauth-private.key
                        /conf/volume-oauth/oauth-public.key
                        /var/www/html/storage/; cp /conf/volume-odbc/odbc.ini
                        /etc/odbc.ini;
                    containerName: pavement-cron
              name: pavement-cron
              resources: {}
              volumeMounts:
                - mountPath: /var/www/html/storage/logs
                  name: volume-storage
                - mountPath: /var/www/html/storage/app/reports
                  name: volume-reports
                - mountPath: /conf/volume-odbc/
                  name: volume-odbc
                - mountPath: /conf/volume-oauth/
                  name: volume-oauth
          dnsPolicy: ClusterFirst
          imagePullSecrets:
            - name: ccc-docker-default
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - emptyDir: {}
              name: volume-storage
            - emptyDir: {}
              name: volume-reports
            - name: volume-odbc
              secret:
                secretName: odbcfile
            - name: volume-oauth
              secret:
                secretName: passport-oauth
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - pavement-web-php
              - pavement-horizon
            from:
              kind: ImageStreamTag
              name: 'pavement-web:${IMAGE_STREAM_TAG_CLEAR}'
          type: ImageChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - pavement-cron
            from:
              kind: ImageStreamTag
              name: 'pavement-cron:${IMAGE_STREAM_TAG_CLEAR}'
          type: ImageChange
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: pavement-nginx
      name: pavement-nginx
    spec:
      ports:
        - name: 80-tcp
          port: 80
          protocol: TCP
          targetPort: 80
        - name: 8081-tcp
          port: 8081
          protocol: TCP
          targetPort: 8081
        - name: 8443-tcp
          port: 8443
          protocol: TCP
          targetPort: 8443
      selector:
        deploymentconfig: pavement-nginx
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      labels:
        app: pavement-nginx
      name: pavement-nginx
    spec:
      lookupPolicy:
        local: true
      tags:
        - annotations: null
          from:
            kind: DockerImage
            name: 'docker.calcartage.com/pavement-nginx:${IMAGE_STREAM_TAG_CLEAR}'
          importPolicy: {}
          name: '${IMAGE_STREAM_TAG_CLEAR}'
          referencePolicy:
            type: Source
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: pavement-nginx
      name: pavement-nginx
    spec:
      replicas: 1
      selector:
        app: pavement-nginx
        deploymentconfig: pavement-nginx
      template:
        metadata:
          labels:
            app: pavement-nginx
            deploymentconfig: pavement-nginx
        spec:
          containers:
            - env:
                - name: PHP_POD_NAME
                  value: pavement-web
                - name: PROJECT_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: NGINX_SECURE_HOSTNAME
                  value: '${NGINX_SECURE_HOSTNAME_CLEAR}'
                - name: NGINX_INSECURE_HOSTNAME
                  value: '${NGINX_INSECURE_HOSTNAME_CLEAR}'
                - name: NGINX_SECURE_PORT
                  value: '${NGINX_SECURE_PORT_CLEAR}'
                - name: NGINX_INSECURE_PORT
                  value: '${NGINX_INSECURE_PORT_CLEAR}'
              envFrom:
                - secretRef:
                    name: pav-nginx-template
              livenessProbe:
                initialDelaySeconds: 20
                periodSeconds: 20
                tcpSocket:
                  port: 8081
                timeoutSeconds: 10
              name: pavement-nginx
              ports:
                - containerPort: 80
                  protocol: TCP
                - containerPort: 8081
                  protocol: TCP
                - containerPort: 8443
                  protocol: TCP
              readinessProbe:
                httpGet:
                  httpHeaders:
                    - name: Accept
                      value: application/json
                    - name: Content-Type
                      value: application/json
                  initialDelaySeconds: 15
                  path: /api/health
                  port: 8081
                  scheme: HTTP
                  timeoutSeconds: 10
                initialDelaySeconds: 15
                periodSeconds: 10
                timeoutSeconds: 5
              resources: {}
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /etc/nginx/certs
                  name: nginx-certs
          dnsPolicy: ClusterFirst
          imagePullSecrets:
            - name: ccc-docker-default
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: nginx-certs
              secret:
                defaultMode: 420
                secretName: nginx-certs
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - pavement-nginx
            from:
              kind: ImageStreamTag
              name: 'pavement-nginx:${IMAGE_STREAM_TAG_CLEAR}'
          type: ImageChange
        - type: ConfigChange
  - apiVersion: v1
    data:
      NGINX_INSECURE_HOSTNAME: cGF2ZW1lbnQteW1zMy5rOHMubmZpaS5jb20=
      NGINX_INSECURE_PORT: ODA4MQ==
      NGINX_SECURE_HOSTNAME: c3NsLXBhdmVtZW50LXltczMuazhzLm5maWkuY29t
      NGINX_SECURE_PORT: ODQ0Mw==
    kind: Secret
    metadata:
      name: pav-nginx-template
    type: Opaque
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      annotations:
        template.openshift.io/expose-uri: 'https://{.spec.host}{.spec.path}'
      labels:
        app: pavement-nginx
      name: nfi
    spec:
      port:
        targetPort: 8081-tcp
      to:
        kind: Service
        name: pavement-nginx
parameters:
  - description: ''
    name: APP_ENV
  - name: APP_KEY
  - name: APP_NAME
  - name: APP_DEBUG
  - name: APP_URL
  - name: LOG_CHANNEL
  - name: DB_CONNECTION
  - name: DB_HOST
  - name: DB_PORT
  - name: DB_DATABASE
  - name: DB_USERNAME
  - name: DB_PASSWORD
  - name: DB_USERNAME_CLEAR
  - name: DB_PASSWORD_CLEAR
  - name: DB_CONTAINER_COUNT_CLEAR
  - name: BROADCAST_DRIVER
  - name: CACHE_DRIVER
  - name: QUEUE_CONNECTION
  - name: SESSION_DRIVER
  - name: SESSION_LIFETIME
  - name: REDIS_HOST
  - name: REDIS_PASSWORD
  - name: REDIS_PORT
  - name: MAIL_DRIVER
  - name: MAIL_HOST
  - name: MAIL_PORT
  - name: MAIL_USERNAME
  - name: MAIL_PASSWORD
  - name: MAIL_ENCRYPTION
  - name: MAIL_FROM_ADDRESS
  - name: MAIL_FROM_NAME
  - name: MAILGUN_DOMAIN
  - name: MAILGUN_SECRET
  - name: DEV_EMAIL
  - name: AWS_ACCESS_KEY_ID
  - name: AWS_SECRET_ACCESS_KEY
  - name: AWS_DEFAULT_REGION
  - name: AWS_BUCKET
  - name: PUSHER_APP_CLUSTER
  - name: PUSHER_APP_ID
  - name: PUSHER_APP_KEY
  - name: PUSHER_APP_SECRET
  - name: MIX_PUSHER_APP_CLUSTER
  - name: MIX_PUSHER_APP_KEY
  - name: MIX_PUSHER_SHOW_SOURCE_MAPS
  - name: MIX_SHOW_SOURCE_MAPS
  - name: DB2_ODBC
  - name: DECON_API_URL
  - name: DECON_AUTH_TOKEN
  - name: EVENT_PROJECTOR_QUEUE_NAME
  - name: MIX_SENTRY_LARAVEL_DSN
  - name: PSYSH_CONFIG
  - name: SENTRY_LARAVEL_DSN
  - name: PSYSH_CONFIG
  - name: PASSPORT_OAUTH_PRIVATE_KEY_CLEAR
  - name: PASSPORT_OAUTH_PUBLIC_KEY_CLEAR
  - name: MIX_LOGROCKET_URL
  - name: SAFETY_EXPECTED_TOKEN
  - name: DEBUGBAR_ENABLED
  - name: PROXY_ACTIVE
  - name: MIX_LOG_ROCKET_URL
  - name: TRUSTED_PROXIES
  - name: PROXY_PATH_HEADER
  - name: ODBC_CONNECTION_NAME
  - name: ODBC_CONNECTION_HOST
  - name: ODBC_CONNECTION_USER
  - name: ODBC_CONNECTION_PASS
  - name: ODBC_CONNECTION_DATABASE
  - name: ODBC_CONNECTION_LIBRARY
  - name: PSYSH_CONFIG
  - name: SAFETY_EXPECTED_TOKEN
  - name: FTP_HOST
  - name: FTP_USERNAME
  - name: FTP_PASSWORD
  - name: FTP_ROOT_DIR
  - name: NGINX_SECURE_PORT_CLEAR
  - name: NGINX_SECURE_HOSTNAME_CLEAR
  - name: NGINX_INSECURE_PORT_CLEAR
  - name: NGINX_INSECURE_HOSTNAME_CLEAR
  - name: PAVEMENT_SSL_CRT_CLEAR
  - name: PAVEMENT_SSL_KEY_CLEAR
  - name: ODBC_FILE_CLEAR
  - name: IMAGE_STREAM_TAG_CLEAR
  - name: MIGRATE_ON_DEPLOY
  - name: SEED_ON_DEPLOY
  - name: APP_SUPPORT_EMAIL
